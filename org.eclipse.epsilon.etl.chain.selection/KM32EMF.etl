model KM3 driver EMF {
nsuri = "http://www.eclipse.org/gmt/2005/KM31"
};

model Ecore driver EMF {
nsuri = "http://www.eclipse.org/emf/2002/Ecore1"
};

pre {"Transformation starts".println(); }

operation KM3!Package getMetadata(name : String) : String {
	var comment = self.commentsBefore.select(e | e.startsWith('-- @' + name + ' ')).first();
	if(comment.isUnDefined())
		comment="Undefined";
	else
		comment.substring(6 + name.size(), comment.size());
	
	}

rule Package 
	transform e : KM3!Package
	to c : Ecore!EPackage {
			c.name = e.name;
			c.eClassifiers = e.contents->select(e | e.isKindOf(KM3!Classifier));
			c.eSubpackages = e.contents->select(e | e.isKindOf(KM3!Package));
			//c.nsURI = e.getMetadata('nsURI');
			//c.nsPrefix = e.getMetadata('nsPrefix');
		}


rule PrimitiveType 
	transform
		e : KM3!DataType
	to
		c : Ecore!EDataType {
			c.name = e.name;
		}

rule Reference 
	transform e : KM3!Reference
	to c : Ecore!EReference {
			c.name = e.name;
			//c.eType = e.type;
			c.lowerBound = e.lower;
			c.upperBound = e.upper;
			c.ordered = e.isOrdered;
			c.eOpposite = e.opposite;
			c.containment = e.isContainer;
		}
		

rule Class 
	transform e : KM3!Class
	to
		c : Ecore!EClass {
			c.name = e.name;
			c.eStructuralFeatures = e.structuralFeatures;
			c.eOperations = e.operations;
			c.eSuperTypes = e.supertypes;
			c.abstract = e.isAbstract;
		}

/*
rule PrimitiveAttribute {
	from
		e : KM3!Attribute (
			e.type.oclIsKindOf(KM3!DataType) or
			e.type.oclIsKindOf(KM3!Enumeration)
		)
	to
		c : MOF!EAttribute (
			name <- e.name,
			eType <- e.type,
			lowerBound <- e.lower,
			upperBound <- e.upper,
			ordered <- e.isOrdered,
			"unique" <- e.isUnique
		)
}

rule NonPrimitiveAttribute {
	from
		e : KM3!Attribute (
			not (e.type.oclIsKindOf(KM3!DataType) or
			e.type.oclIsKindOf(KM3!Enumeration))
		)
	to
		c : MOF!EReference (
			name <- e.name,
			eType <- e.type,
			lowerBound <- e.lower,
			upperBound <- e.upper,
			ordered <- e.isOrdered,
			containment <- true
		)
}

rule Enumeration {
	from
		e : KM3!Enumeration
	to
		c : MOF!EEnum (
			name <- e.name,
			eLiterals <- e.literals
		)
}

rule EnumLiteral {
	from
		e : KM3!EnumLiteral
	to
		c : MOF!EEnumLiteral (
			name <- e.name,
			value <- e.enum.literals->indexOf(e)
		)
}

rule Operation {
	from
		io : KM3!Operation
	to
		oo : MOF!EOperation (
			name <- io.name,
			eParameters <- io.parameters,
			eType <- io.type
		)
}

rule Parameter {
	from
		ip : KM3!Parameter
	to
		op : MOF!EParameter (
			name <- ip.name,
			eType <- ip.type
		)
}
*/

post {"KM32EMF Transformation ends".println(); }


